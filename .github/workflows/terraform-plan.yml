name: "Terraform Plan"

on:
  pull_request:
  workflow_dispatch:

env:
  TF_CLOUD_ORGANIZATION: "projeto-fiap-64"
  TF_WORKSPACE: "hackaton-fiap-64"
  CONFIG_DIRECTORY: "./"
  API_NAME: "HackatonFiapAPI"
  STAGE_NAME: "prod"
  AWS_DEFAULT_REGION: 'us-east-1'
  CLUSTER_NAME: 'hackaton-fiap'

  LAMBDA_JWT_URL: ${{ vars.LAMBDA_JWT_URL }}
  LAMBDA_AUTH_URL: ${{ vars.LAMBDA_AUTH_URL }}

  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"

  DB_CLUSTER_NAME: ${{ vars.DB_CLUSTER_NAME }}
  DB_NAME: ${{ vars.DB_NAME }}
  DB_USERNAME: ${{ vars.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.PROJETOFIAP_DB_PASSWORD }}
  DB_PORT: ${{ vars.DB_PORT }}
  LAMBDA_JWT_SECRET_VALUE: ${{ secrets.LAMBDA_JWT_SECRET }}

jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Zip jwt lambda repo's code
        run:  |
              git clone $LAMBDA_JWT_URL
              REPO_NAME=$(echo "$LAMBDA_JWT_URL" | awk -F'/' '{print $NF}' | cut -d. -f1)
              cd $REPO_NAME
              npm ci
              npm run build --if-present
              ls
              zip -r ../deployment_jwt.zip *

      - name: Zip auth lambda repo's code
        run:  |
              git clone $LAMBDA_AUTH_URL
              REPO_NAME=$(echo "$LAMBDA_AUTH_URL" | awk -F'/' '{print $NF}' | cut -d. -f1)
              cd $REPO_NAME
              npm ci
              npm run build --if-present
              ls
              zip -r ../deployment_auth.zip *

      - name: Replace terraform variable values
        run:  |
          sed -i 's@DB_CLUSTER_NAME_HERE@${{ env.DB_CLUSTER_NAME }}@g' variables.tf
          sed -i 's@DB_NAME_HERE@${{ env.DB_NAME }}@g' variables.tf
          sed -i 's@DB_USERNAME_HERE@${{ env.DB_USERNAME }}@g' variables.tf
          sed -i 's@DB_PASSWORD_HERE@${{ env.DB_PASSWORD }}@g' variables.tf
          sed -i 's@DB_PORT_HERE@${{ env.DB_PORT }}@g' variables.tf
          sed -i 's@JWT_SECRET_HERE@${{ env.LAMBDA_JWT_SECRET_VALUE }}@g' variables.tf
          cat variables.tf

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
               \`\`\`
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  kubernetes-validation:
    needs: terraform
    runs-on: ubuntu-latest

    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install kubeval
      run: |
            curl -sL https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar zx
            sudo install kubeval /usr/local/bin/

    - name: Validate Kubernetes manifests
      run: |
            kubeval --schema-location https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master ./kubernetes/*.yaml